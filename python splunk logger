import logging

from cfenv import AppEnv
from splunk_handler import SplunkHandler


def my_logger():
    env = AppEnv()
    splunk_service = env.get_service(label='splunk')
    splunk_cred = splunk_service.credentials

    # ---- Logging
    splunk = SplunkHandler(
        host1=splunk_cred['tcpserverlist'].split(':')[0],
        port1=splunk_cred['tcpserverlist'].split(':')[1],
        token=splunk_cred['token'],
        index=splunk_cred['index'],
        #hostname='hostname', # manually set a hostname parameter, defaults to socket.gethostname()
        #source='source', # manually set a source, defaults to the log record.pathname
        sourcetype='mailserver', # manually set a sourcetype, defaults to 'text'
        verify=False, # turn SSL verification on or off, defaults to True
        #timeout=60, # timeout for waiting on a 200 OK from Splunk server, defaults to 60s
        #flush_interval=15.0, # send batch of logs every n sec, defaults to 15.0, set '0' to block thread & send immediately
        #queue_size=5000, # a throttle to prevent resource overconsumption, defaults to 5000
        debug=False, # turn on debug mode; prints module activity to stdout, defaults to False
        #retry_count=5, # Number of retry attempts on a failed/erroring connection, defaults to 5
        #retry_backoff=2.0,  # Backoff factor, default options will retry for 1 min, defaults to 2.0
    )

    logger = logging.getLogger('mail_servero_application')
    logger.setLevel(logging.INFO)
    logger.addHandler(splunk)

    return logger
